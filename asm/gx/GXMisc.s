.include "macros.inc"

.section .text

.global GXSetMisc
GXSetMisc:
/* 800A55C8 000A25C8  2C 03 00 02 */	cmpwi r3, 2
/* 800A55CC 000A25CC  41 82 00 60 */	beq lbl_800A562C
/* 800A55D0 000A25D0  40 80 00 14 */	bge lbl_800A55E4
/* 800A55D4 000A25D4  2C 03 00 00 */	cmpwi r3, 0
/* 800A55D8 000A25D8  4D 82 00 20 */	beqlr 
/* 800A55DC 000A25DC  40 80 00 14 */	bge lbl_800A55F0
/* 800A55E0 000A25E0  4E 80 00 20 */	blr 
lbl_800A55E4:
/* 800A55E4 000A25E4  2C 03 00 04 */	cmpwi r3, 4
/* 800A55E8 000A25E8  4C 80 00 20 */	bgelr 
/* 800A55EC 000A25EC  48 00 00 58 */	b lbl_800A5644
lbl_800A55F0:
/* 800A55F0 000A25F0  80 AD 97 08 */	lwz r5, __GXData-_SDA_BASE_(r13)
/* 800A55F4 000A25F4  38 00 00 01 */	li r0, 1
/* 800A55F8 000A25F8  B0 85 00 04 */	sth r4, 4(r5)
/* 800A55FC 000A25FC  A0 65 00 04 */	lhz r3, 4(r5)
/* 800A5600 000A2600  7C 63 00 34 */	cntlzw r3, r3
/* 800A5604 000A2604  54 63 DC 3E */	rlwinm r3, r3, 0x1b, 0x10, 0x1f
/* 800A5608 000A2608  B0 65 00 00 */	sth r3, 0(r5)
/* 800A560C 000A260C  B0 05 00 02 */	sth r0, 2(r5)
/* 800A5610 000A2610  A0 05 00 04 */	lhz r0, 4(r5)
/* 800A5614 000A2614  28 00 00 00 */	cmplwi r0, 0
/* 800A5618 000A2618  4D 82 00 20 */	beqlr 
/* 800A561C 000A261C  80 05 05 AC */	lwz r0, 0x5ac(r5)
/* 800A5620 000A2620  60 00 00 08 */	ori r0, r0, 8
/* 800A5624 000A2624  90 05 05 AC */	stw r0, 0x5ac(r5)
/* 800A5628 000A2628  4E 80 00 20 */	blr 
lbl_800A562C:
/* 800A562C 000A262C  7C 84 00 D0 */	neg r4, r4
/* 800A5630 000A2630  80 6D 97 08 */	lwz r3, __GXData-_SDA_BASE_(r13)
/* 800A5634 000A2634  30 04 FF FF */	addic r0, r4, -1
/* 800A5638 000A2638  7C 00 21 10 */	subfe r0, r0, r4
/* 800A563C 000A263C  98 03 05 A9 */	stb r0, 0x5a9(r3)
/* 800A5640 000A2640  4E 80 00 20 */	blr 
lbl_800A5644:
/* 800A5644 000A2644  7C 84 00 D0 */	neg r4, r4
/* 800A5648 000A2648  80 6D 97 08 */	lwz r3, __GXData-_SDA_BASE_(r13)
/* 800A564C 000A264C  30 04 FF FF */	addic r0, r4, -1
/* 800A5650 000A2650  7C 00 21 10 */	subfe r0, r0, r4
/* 800A5654 000A2654  98 03 05 AA */	stb r0, 0x5aa(r3)
/* 800A5658 000A2658  4E 80 00 20 */	blr 

.global GXFlush
GXFlush:
/* 800A565C 000A265C  7C 08 02 A6 */	mflr r0
/* 800A5660 000A2660  90 01 00 04 */	stw r0, 4(r1)
/* 800A5664 000A2664  94 21 FF F8 */	stwu r1, -8(r1)
/* 800A5668 000A2668  80 6D 97 08 */	lwz r3, __GXData-_SDA_BASE_(r13)
/* 800A566C 000A266C  80 03 05 AC */	lwz r0, 0x5ac(r3)
/* 800A5670 000A2670  28 00 00 00 */	cmplwi r0, 0
/* 800A5674 000A2674  41 82 00 08 */	beq lbl_800A567C
/* 800A5678 000A2678  48 00 06 7D */	bl __GXSetDirtyState
lbl_800A567C:
/* 800A567C 000A267C  38 00 00 00 */	li r0, 0
/* 800A5680 000A2680  3C 60 CC 01 */	lis r3, 0xCC008000@ha
/* 800A5684 000A2684  90 03 80 00 */	stw r0, 0xCC008000@l(r3)
/* 800A5688 000A2688  90 03 80 00 */	stw r0, -0x8000(r3)
/* 800A568C 000A268C  90 03 80 00 */	stw r0, -0x8000(r3)
/* 800A5690 000A2690  90 03 80 00 */	stw r0, -0x8000(r3)
/* 800A5694 000A2694  90 03 80 00 */	stw r0, -0x8000(r3)
/* 800A5698 000A2698  90 03 80 00 */	stw r0, -0x8000(r3)
/* 800A569C 000A269C  90 03 80 00 */	stw r0, -0x8000(r3)
/* 800A56A0 000A26A0  90 03 80 00 */	stw r0, -0x8000(r3)
/* 800A56A4 000A26A4  4B FE 2D 55 */	bl PPCSync
/* 800A56A8 000A26A8  80 01 00 0C */	lwz r0, 0xc(r1)
/* 800A56AC 000A26AC  38 21 00 08 */	addi r1, r1, 8
/* 800A56B0 000A26B0  7C 08 03 A6 */	mtlr r0
/* 800A56B4 000A26B4  4E 80 00 20 */	blr 

.global __GXAbort
__GXAbort:
/* 800A56B8 000A26B8  7C 08 02 A6 */	mflr r0
/* 800A56BC 000A26BC  90 01 00 04 */	stw r0, 4(r1)
/* 800A56C0 000A26C0  94 21 FF D8 */	stwu r1, -0x28(r1)
/* 800A56C4 000A26C4  BF 61 00 14 */	stmw r27, 0x14(r1)
/* 800A56C8 000A26C8  80 6D 97 08 */	lwz r3, __GXData-_SDA_BASE_(r13)
/* 800A56CC 000A26CC  88 03 05 AA */	lbz r0, 0x5aa(r3)
/* 800A56D0 000A26D0  28 00 00 00 */	cmplwi r0, 0
/* 800A56D4 000A26D4  41 82 00 B0 */	beq lbl_800A5784
/* 800A56D8 000A26D8  4B FF EA D9 */	bl GXGetGPFifo
/* 800A56DC 000A26DC  28 03 00 00 */	cmplwi r3, 0
/* 800A56E0 000A26E0  41 82 00 A4 */	beq lbl_800A5784
/* 800A56E4 000A26E4  80 6D 89 84 */	lwz r3, __memReg-_SDA_BASE_(r13)
/* 800A56E8 000A26E8  38 C3 00 4E */	addi r6, r3, 0x4e
/* 800A56EC 000A26EC  A0 83 00 4E */	lhz r4, 0x4e(r3)
/* 800A56F0 000A26F0  38 A3 00 50 */	addi r5, r3, 0x50
lbl_800A56F4:
/* 800A56F4 000A26F4  7C 80 23 78 */	mr r0, r4
/* 800A56F8 000A26F8  A0 86 00 00 */	lhz r4, 0(r6)
/* 800A56FC 000A26FC  A0 65 00 00 */	lhz r3, 0(r5)
/* 800A5700 000A2700  7C 04 00 40 */	cmplw r4, r0
/* 800A5704 000A2704  40 82 FF F0 */	bne lbl_800A56F4
/* 800A5708 000A2708  54 80 80 1E */	slwi r0, r4, 0x10
/* 800A570C 000A270C  7C 1B 1B 78 */	or r27, r0, r3
lbl_800A5710:
/* 800A5710 000A2710  4B FE 91 39 */	bl OSGetTime
/* 800A5714 000A2714  38 00 00 00 */	li r0, 0
/* 800A5718 000A2718  3B E4 00 00 */	addi r31, r4, 0
/* 800A571C 000A271C  3B C3 00 00 */	addi r30, r3, 0
/* 800A5720 000A2720  6C 1C 80 00 */	xoris r28, r0, 0x8000
/* 800A5724 000A2724  3B A0 00 08 */	li r29, 8
lbl_800A5728:
/* 800A5728 000A2728  4B FE 91 21 */	bl OSGetTime
/* 800A572C 000A272C  7C 9F 20 10 */	subfc r4, r31, r4
/* 800A5730 000A2730  7C 1E 19 10 */	subfe r0, r30, r3
/* 800A5734 000A2734  6C 03 80 00 */	xoris r3, r0, 0x8000
/* 800A5738 000A2738  7C 04 E8 10 */	subfc r0, r4, r29
/* 800A573C 000A273C  7C 63 E1 10 */	subfe r3, r3, r28
/* 800A5740 000A2740  7C 7C E1 10 */	subfe r3, r28, r28
/* 800A5744 000A2744  7C 63 00 D1 */	neg. r3, r3
/* 800A5748 000A2748  41 82 FF E0 */	beq lbl_800A5728
/* 800A574C 000A274C  80 6D 89 84 */	lwz r3, __memReg-_SDA_BASE_(r13)
/* 800A5750 000A2750  38 C3 00 4E */	addi r6, r3, 0x4e
/* 800A5754 000A2754  A0 83 00 4E */	lhz r4, 0x4e(r3)
/* 800A5758 000A2758  38 A3 00 50 */	addi r5, r3, 0x50
lbl_800A575C:
/* 800A575C 000A275C  7C 80 23 78 */	mr r0, r4
/* 800A5760 000A2760  A0 86 00 00 */	lhz r4, 0(r6)
/* 800A5764 000A2764  A0 65 00 00 */	lhz r3, 0(r5)
/* 800A5768 000A2768  7C 04 00 40 */	cmplw r4, r0
/* 800A576C 000A276C  40 82 FF F0 */	bne lbl_800A575C
/* 800A5770 000A2770  54 80 80 1E */	slwi r0, r4, 0x10
/* 800A5774 000A2774  7C 00 1B 78 */	or r0, r0, r3
/* 800A5778 000A2778  7C 00 D8 40 */	cmplw r0, r27
/* 800A577C 000A277C  7C 1B 03 78 */	mr r27, r0
/* 800A5780 000A2780  40 82 FF 90 */	bne lbl_800A5710
lbl_800A5784:
/* 800A5784 000A2784  3C 60 CC 00 */	lis r3, 0xCC003000@ha
/* 800A5788 000A2788  38 00 00 01 */	li r0, 1
/* 800A578C 000A278C  3B 63 30 00 */	addi r27, r3, 0xCC003000@l
/* 800A5790 000A2790  94 1B 00 18 */	stwu r0, 0x18(r27)
/* 800A5794 000A2794  4B FE 90 B5 */	bl OSGetTime
/* 800A5798 000A2798  38 00 00 00 */	li r0, 0
/* 800A579C 000A279C  3B E4 00 00 */	addi r31, r4, 0
/* 800A57A0 000A27A0  3B C3 00 00 */	addi r30, r3, 0
/* 800A57A4 000A27A4  6C 1C 80 00 */	xoris r28, r0, 0x8000
/* 800A57A8 000A27A8  3B A0 00 32 */	li r29, 0x32
lbl_800A57AC:
/* 800A57AC 000A27AC  4B FE 90 9D */	bl OSGetTime
/* 800A57B0 000A27B0  7C 9F 20 10 */	subfc r4, r31, r4
/* 800A57B4 000A27B4  7C 1E 19 10 */	subfe r0, r30, r3
/* 800A57B8 000A27B8  6C 03 80 00 */	xoris r3, r0, 0x8000
/* 800A57BC 000A27BC  7C 04 E8 10 */	subfc r0, r4, r29
/* 800A57C0 000A27C0  7C 63 E1 10 */	subfe r3, r3, r28
/* 800A57C4 000A27C4  7C 7C E1 10 */	subfe r3, r28, r28
/* 800A57C8 000A27C8  7C 63 00 D1 */	neg. r3, r3
/* 800A57CC 000A27CC  41 82 FF E0 */	beq lbl_800A57AC
/* 800A57D0 000A27D0  3B C0 00 00 */	li r30, 0
/* 800A57D4 000A27D4  93 DB 00 00 */	stw r30, 0(r27)
/* 800A57D8 000A27D8  4B FE 90 71 */	bl OSGetTime
/* 800A57DC 000A27DC  3B 84 00 00 */	addi r28, r4, 0
/* 800A57E0 000A27E0  3B A3 00 00 */	addi r29, r3, 0
/* 800A57E4 000A27E4  6F DF 80 00 */	xoris r31, r30, 0x8000
/* 800A57E8 000A27E8  3B C0 00 05 */	li r30, 5
lbl_800A57EC:
/* 800A57EC 000A27EC  4B FE 90 5D */	bl OSGetTime
/* 800A57F0 000A27F0  7C 9C 20 10 */	subfc r4, r28, r4
/* 800A57F4 000A27F4  7C 1D 19 10 */	subfe r0, r29, r3
/* 800A57F8 000A27F8  6C 03 80 00 */	xoris r3, r0, 0x8000
/* 800A57FC 000A27FC  7C 04 F0 10 */	subfc r0, r4, r30
/* 800A5800 000A2800  7C 63 F9 10 */	subfe r3, r3, r31
/* 800A5804 000A2804  7C 7F F9 10 */	subfe r3, r31, r31
/* 800A5808 000A2808  7C 63 00 D1 */	neg. r3, r3
/* 800A580C 000A280C  41 82 FF E0 */	beq lbl_800A57EC
/* 800A5810 000A2810  BB 61 00 14 */	lmw r27, 0x14(r1)
/* 800A5814 000A2814  80 01 00 2C */	lwz r0, 0x2c(r1)
/* 800A5818 000A2818  38 21 00 28 */	addi r1, r1, 0x28
/* 800A581C 000A281C  7C 08 03 A6 */	mtlr r0
/* 800A5820 000A2820  4E 80 00 20 */	blr 

.global GXSetDrawDone
GXSetDrawDone:
/* 800A5824 000A2824  7C 08 02 A6 */	mflr r0
/* 800A5828 000A2828  90 01 00 04 */	stw r0, 4(r1)
/* 800A582C 000A282C  94 21 FF E8 */	stwu r1, -0x18(r1)
/* 800A5830 000A2830  93 E1 00 14 */	stw r31, 0x14(r1)
/* 800A5834 000A2834  93 C1 00 10 */	stw r30, 0x10(r1)
/* 800A5838 000A2838  7C 7E 1B 78 */	mr r30, r3
/* 800A583C 000A283C  4B FE 58 25 */	bl OSDisableInterrupts
/* 800A5840 000A2840  38 C0 00 61 */	li r6, 0x61
/* 800A5844 000A2844  80 8D 97 08 */	lwz r4, __GXData-_SDA_BASE_(r13)
/* 800A5848 000A2848  3C A0 CC 01 */	lis r5, 0xCC008000@ha
/* 800A584C 000A284C  57 C0 04 3E */	clrlwi r0, r30, 0x10
/* 800A5850 000A2850  98 C5 80 00 */	stb r6, 0xCC008000@l(r5)
/* 800A5854 000A2854  64 07 48 00 */	oris r7, r0, 0x4800
/* 800A5858 000A2858  90 E5 80 00 */	stw r7, -0x8000(r5)
/* 800A585C 000A285C  53 C7 04 3E */	rlwimi r7, r30, 0, 0x10, 0x1f
/* 800A5860 000A2860  38 00 00 47 */	li r0, 0x47
/* 800A5864 000A2864  98 C5 80 00 */	stb r6, -0x8000(r5)
/* 800A5868 000A2868  50 07 C0 0E */	rlwimi r7, r0, 0x18, 0, 7
/* 800A586C 000A286C  7C 7E 1B 78 */	mr r30, r3
/* 800A5870 000A2870  90 E5 80 00 */	stw r7, -0x8000(r5)
/* 800A5874 000A2874  80 04 05 AC */	lwz r0, 0x5ac(r4)
/* 800A5878 000A2878  28 00 00 00 */	cmplwi r0, 0
/* 800A587C 000A287C  41 82 00 08 */	beq lbl_800A5884
/* 800A5880 000A2880  48 00 04 75 */	bl __GXSetDirtyState
lbl_800A5884:
/* 800A5884 000A2884  3B E0 00 00 */	li r31, 0
/* 800A5888 000A2888  3C 60 CC 01 */	lis r3, 0xCC008000@ha
/* 800A588C 000A288C  93 E3 80 00 */	stw r31, 0xCC008000@l(r3)
/* 800A5890 000A2890  93 E3 80 00 */	stw r31, -0x8000(r3)
/* 800A5894 000A2894  93 E3 80 00 */	stw r31, -0x8000(r3)
/* 800A5898 000A2898  93 E3 80 00 */	stw r31, -0x8000(r3)
/* 800A589C 000A289C  93 E3 80 00 */	stw r31, -0x8000(r3)
/* 800A58A0 000A28A0  93 E3 80 00 */	stw r31, -0x8000(r3)
/* 800A58A4 000A28A4  93 E3 80 00 */	stw r31, -0x8000(r3)
/* 800A58A8 000A28A8  93 E3 80 00 */	stw r31, -0x8000(r3)
/* 800A58AC 000A28AC  4B FE 2B 4D */	bl PPCSync
/* 800A58B0 000A28B0  7F C3 F3 78 */	mr r3, r30
/* 800A58B4 000A28B4  4B FE 57 D5 */	bl OSRestoreInterrupts
/* 800A58B8 000A28B8  80 6D 97 08 */	lwz r3, __GXData-_SDA_BASE_(r13)
/* 800A58BC 000A28BC  B3 E3 00 02 */	sth r31, 2(r3)
/* 800A58C0 000A28C0  80 01 00 1C */	lwz r0, 0x1c(r1)
/* 800A58C4 000A28C4  83 E1 00 14 */	lwz r31, 0x14(r1)
/* 800A58C8 000A28C8  83 C1 00 10 */	lwz r30, 0x10(r1)
/* 800A58CC 000A28CC  38 21 00 18 */	addi r1, r1, 0x18
/* 800A58D0 000A28D0  7C 08 03 A6 */	mtlr r0
/* 800A58D4 000A28D4  4E 80 00 20 */	blr 

.global func_800A58D8
func_800A58D8:
/* 800A58D8 000A28D8  80 6D 89 80 */	lwz r3, __peReg-_SDA_BASE_(r13)
/* 800A58DC 000A28DC  A0 63 00 0E */	lhz r3, 0xe(r3)
/* 800A58E0 000A28E0  4E 80 00 20 */	blr 

.global GXDrawDone
GXDrawDone:
/* 800A58E4 000A28E4  7C 08 02 A6 */	mflr r0
/* 800A58E8 000A28E8  90 01 00 04 */	stw r0, 4(r1)
/* 800A58EC 000A28EC  94 21 FF E8 */	stwu r1, -0x18(r1)
/* 800A58F0 000A28F0  93 E1 00 14 */	stw r31, 0x14(r1)
/* 800A58F4 000A28F4  4B FE 57 6D */	bl OSDisableInterrupts
/* 800A58F8 000A28F8  38 00 00 61 */	li r0, 0x61
/* 800A58FC 000A28FC  3C A0 CC 01 */	lis r5, 0xCC008000@ha
/* 800A5900 000A2900  3C 80 45 00 */	lis r4, 0x45000002@ha
/* 800A5904 000A2904  98 05 80 00 */	stb r0, 0xCC008000@l(r5)
/* 800A5908 000A2908  38 04 00 02 */	addi r0, r4, 0x45000002@l
/* 800A590C 000A290C  90 05 80 00 */	stw r0, -0x8000(r5)
/* 800A5910 000A2910  7C 7F 1B 78 */	mr r31, r3
/* 800A5914 000A2914  4B FF FD 49 */	bl GXFlush
/* 800A5918 000A2918  38 00 00 00 */	li r0, 0
/* 800A591C 000A291C  98 0D 89 68 */	stb r0, lbl_80259D08-_SDA_BASE_(r13)
/* 800A5920 000A2920  7F E3 FB 78 */	mr r3, r31
/* 800A5924 000A2924  4B FE 57 65 */	bl OSRestoreInterrupts
/* 800A5928 000A2928  4B FE 57 39 */	bl OSDisableInterrupts
/* 800A592C 000A292C  7C 7F 1B 78 */	mr r31, r3
/* 800A5930 000A2930  48 00 00 0C */	b lbl_800A593C
lbl_800A5934:
/* 800A5934 000A2934  38 6D 89 6C */	addi r3, r13, FinishQueue-_SDA_BASE_
/* 800A5938 000A2938  4B FE 84 89 */	bl OSSleepThread
lbl_800A593C:
/* 800A593C 000A293C  88 0D 89 68 */	lbz r0, lbl_80259D08-_SDA_BASE_(r13)
/* 800A5940 000A2940  28 00 00 00 */	cmplwi r0, 0
/* 800A5944 000A2944  41 82 FF F0 */	beq lbl_800A5934
/* 800A5948 000A2948  7F E3 FB 78 */	mr r3, r31
/* 800A594C 000A294C  4B FE 57 3D */	bl OSRestoreInterrupts
/* 800A5950 000A2950  80 01 00 1C */	lwz r0, 0x1c(r1)
/* 800A5954 000A2954  83 E1 00 14 */	lwz r31, 0x14(r1)
/* 800A5958 000A2958  38 21 00 18 */	addi r1, r1, 0x18
/* 800A595C 000A295C  7C 08 03 A6 */	mtlr r0
/* 800A5960 000A2960  4E 80 00 20 */	blr 

.global GXPixModeSync
GXPixModeSync:
/* 800A5964 000A2964  38 00 00 61 */	li r0, 0x61
/* 800A5968 000A2968  80 8D 97 08 */	lwz r4, __GXData-_SDA_BASE_(r13)
/* 800A596C 000A296C  3C A0 CC 01 */	lis r5, 0xCC008000@ha
/* 800A5970 000A2970  98 05 80 00 */	stb r0, 0xCC008000@l(r5)
/* 800A5974 000A2974  38 00 00 00 */	li r0, 0
/* 800A5978 000A2978  80 64 01 DC */	lwz r3, 0x1dc(r4)
/* 800A597C 000A297C  90 65 80 00 */	stw r3, -0x8000(r5)
/* 800A5980 000A2980  B0 04 00 02 */	sth r0, 2(r4)
/* 800A5984 000A2984  4E 80 00 20 */	blr 

.global GXPokeAlphaMode
GXPokeAlphaMode:
/* 800A5988 000A2988  80 AD 89 80 */	lwz r5, __peReg-_SDA_BASE_(r13)
/* 800A598C 000A298C  54 80 06 3E */	clrlwi r0, r4, 0x18
/* 800A5990 000A2990  50 60 40 2E */	rlwimi r0, r3, 8, 0, 0x17
/* 800A5994 000A2994  B0 05 00 06 */	sth r0, 6(r5)
/* 800A5998 000A2998  4E 80 00 20 */	blr 

.global GXPokeAlphaRead
GXPokeAlphaRead:
/* 800A599C 000A299C  38 A0 00 00 */	li r5, 0
/* 800A59A0 000A29A0  80 8D 89 80 */	lwz r4, __peReg-_SDA_BASE_(r13)
/* 800A59A4 000A29A4  50 65 07 BE */	rlwimi r5, r3, 0, 0x1e, 0x1f
/* 800A59A8 000A29A8  38 00 00 01 */	li r0, 1
/* 800A59AC 000A29AC  38 65 00 00 */	addi r3, r5, 0
/* 800A59B0 000A29B0  50 03 17 7A */	rlwimi r3, r0, 2, 0x1d, 0x1d
/* 800A59B4 000A29B4  B0 64 00 08 */	sth r3, 8(r4)
/* 800A59B8 000A29B8  4E 80 00 20 */	blr 

.global GXPokeAlphaUpdate
GXPokeAlphaUpdate:
/* 800A59BC 000A29BC  80 8D 89 80 */	lwz r4, __peReg-_SDA_BASE_(r13)
/* 800A59C0 000A29C0  54 60 06 3E */	clrlwi r0, r3, 0x18
/* 800A59C4 000A29C4  A0 64 00 02 */	lhz r3, 2(r4)
/* 800A59C8 000A29C8  50 03 26 F6 */	rlwimi r3, r0, 4, 0x1b, 0x1b
/* 800A59CC 000A29CC  B0 64 00 02 */	sth r3, 2(r4)
/* 800A59D0 000A29D0  4E 80 00 20 */	blr 

.global GXPokeBlendMode
GXPokeBlendMode:
/* 800A59D4 000A29D4  80 ED 89 80 */	lwz r7, __peReg-_SDA_BASE_(r13)
/* 800A59D8 000A29D8  2C 03 00 01 */	cmpwi r3, 1
/* 800A59DC 000A29DC  39 20 00 01 */	li r9, 1
/* 800A59E0 000A29E0  A1 47 00 02 */	lhz r10, 2(r7)
/* 800A59E4 000A29E4  41 82 00 10 */	beq lbl_800A59F4
/* 800A59E8 000A29E8  2C 03 00 03 */	cmpwi r3, 3
/* 800A59EC 000A29EC  41 82 00 08 */	beq lbl_800A59F4
/* 800A59F0 000A29F0  39 20 00 00 */	li r9, 0
lbl_800A59F4:
/* 800A59F4 000A29F4  20 03 00 03 */	subfic r0, r3, 3
/* 800A59F8 000A29F8  80 ED 89 80 */	lwz r7, __peReg-_SDA_BASE_(r13)
/* 800A59FC 000A29FC  7C 08 00 34 */	cntlzw r8, r0
/* 800A5A00 000A2A00  20 03 00 02 */	subfic r0, r3, 2
/* 800A5A04 000A2A04  51 2A 07 FE */	rlwimi r10, r9, 0, 0x1f, 0x1f
/* 800A5A08 000A2A08  55 03 D9 7E */	srwi r3, r8, 5
/* 800A5A0C 000A2A0C  39 0A 00 00 */	addi r8, r10, 0
/* 800A5A10 000A2A10  7C 00 00 34 */	cntlzw r0, r0
/* 800A5A14 000A2A14  50 68 5D 28 */	rlwimi r8, r3, 0xb, 0x14, 0x14
/* 800A5A18 000A2A18  50 08 E7 BC */	rlwimi r8, r0, 0x1c, 0x1e, 0x1e
/* 800A5A1C 000A2A1C  50 C8 64 26 */	rlwimi r8, r6, 0xc, 0x10, 0x13
/* 800A5A20 000A2A20  50 88 45 6E */	rlwimi r8, r4, 8, 0x15, 0x17
/* 800A5A24 000A2A24  38 00 00 41 */	li r0, 0x41
/* 800A5A28 000A2A28  50 A8 2E 34 */	rlwimi r8, r5, 5, 0x18, 0x1a
/* 800A5A2C 000A2A2C  50 08 C0 0E */	rlwimi r8, r0, 0x18, 0, 7
/* 800A5A30 000A2A30  B1 07 00 02 */	sth r8, 2(r7)
/* 800A5A34 000A2A34  4E 80 00 20 */	blr 

.global GXPokeColorUpdate
GXPokeColorUpdate:
/* 800A5A38 000A2A38  80 8D 89 80 */	lwz r4, __peReg-_SDA_BASE_(r13)
/* 800A5A3C 000A2A3C  54 60 06 3E */	clrlwi r0, r3, 0x18
/* 800A5A40 000A2A40  A0 64 00 02 */	lhz r3, 2(r4)
/* 800A5A44 000A2A44  50 03 1F 38 */	rlwimi r3, r0, 3, 0x1c, 0x1c
/* 800A5A48 000A2A48  B0 64 00 02 */	sth r3, 2(r4)
/* 800A5A4C 000A2A4C  4E 80 00 20 */	blr 

.global GXPokeDstAlpha
GXPokeDstAlpha:
/* 800A5A50 000A2A50  54 80 06 3E */	clrlwi r0, r4, 0x18
/* 800A5A54 000A2A54  80 8D 89 80 */	lwz r4, __peReg-_SDA_BASE_(r13)
/* 800A5A58 000A2A58  38 A0 00 00 */	li r5, 0
/* 800A5A5C 000A2A5C  50 05 06 3E */	rlwimi r5, r0, 0, 0x18, 0x1f
/* 800A5A60 000A2A60  54 60 06 3E */	clrlwi r0, r3, 0x18
/* 800A5A64 000A2A64  38 65 00 00 */	addi r3, r5, 0
/* 800A5A68 000A2A68  50 03 45 EE */	rlwimi r3, r0, 8, 0x17, 0x17
/* 800A5A6C 000A2A6C  B0 64 00 04 */	sth r3, 4(r4)
/* 800A5A70 000A2A70  4E 80 00 20 */	blr 

.global GXPokeDither
GXPokeDither:
/* 800A5A74 000A2A74  80 8D 89 80 */	lwz r4, __peReg-_SDA_BASE_(r13)
/* 800A5A78 000A2A78  54 60 06 3E */	clrlwi r0, r3, 0x18
/* 800A5A7C 000A2A7C  A0 64 00 02 */	lhz r3, 2(r4)
/* 800A5A80 000A2A80  50 03 17 7A */	rlwimi r3, r0, 2, 0x1d, 0x1d
/* 800A5A84 000A2A84  B0 64 00 02 */	sth r3, 2(r4)
/* 800A5A88 000A2A88  4E 80 00 20 */	blr 

.global GXPokeZMode
GXPokeZMode:
/* 800A5A8C 000A2A8C  54 60 06 3E */	clrlwi r0, r3, 0x18
/* 800A5A90 000A2A90  80 6D 89 80 */	lwz r3, __peReg-_SDA_BASE_(r13)
/* 800A5A94 000A2A94  38 C0 00 00 */	li r6, 0
/* 800A5A98 000A2A98  50 06 07 FE */	rlwimi r6, r0, 0, 0x1f, 0x1f
/* 800A5A9C 000A2A9C  50 86 0F 3C */	rlwimi r6, r4, 1, 0x1c, 0x1e
/* 800A5AA0 000A2AA0  50 A6 26 F6 */	rlwimi r6, r5, 4, 0x1b, 0x1b
/* 800A5AA4 000A2AA4  B0 C3 00 00 */	sth r6, 0(r3)
/* 800A5AA8 000A2AA8  4E 80 00 20 */	blr 

.global func_800A5AAC
func_800A5AAC:
/* 800A5AAC 000A2AAC  54 60 04 3E */	clrlwi r0, r3, 0x10
/* 800A5AB0 000A2AB0  3C 60 C8 00 */	lis r3, 0xc800
/* 800A5AB4 000A2AB4  50 03 15 3A */	rlwimi r3, r0, 2, 0x14, 0x1d
/* 800A5AB8 000A2AB8  38 00 00 00 */	li r0, 0
/* 800A5ABC 000A2ABC  50 83 62 A6 */	rlwimi r3, r4, 0xc, 0xa, 0x13
/* 800A5AC0 000A2AC0  50 03 B2 12 */	rlwimi r3, r0, 0x16, 8, 9
/* 800A5AC4 000A2AC4  80 03 00 00 */	lwz r0, 0(r3)
/* 800A5AC8 000A2AC8  90 05 00 00 */	stw r0, 0(r5)
/* 800A5ACC 000A2ACC  4E 80 00 20 */	blr 

.global func_800A5AD0
func_800A5AD0:
/* 800A5AD0 000A2AD0  54 60 04 3E */	clrlwi r0, r3, 0x10
/* 800A5AD4 000A2AD4  3C 60 C8 00 */	lis r3, 0xc800
/* 800A5AD8 000A2AD8  50 03 15 3A */	rlwimi r3, r0, 2, 0x14, 0x1d
/* 800A5ADC 000A2ADC  38 00 00 00 */	li r0, 0
/* 800A5AE0 000A2AE0  50 83 62 A6 */	rlwimi r3, r4, 0xc, 0xa, 0x13
/* 800A5AE4 000A2AE4  50 03 B2 12 */	rlwimi r3, r0, 0x16, 8, 9
/* 800A5AE8 000A2AE8  90 A3 00 00 */	stw r5, 0(r3)
/* 800A5AEC 000A2AEC  4E 80 00 20 */	blr 

.global GXSetDrawSyncCallback
GXSetDrawSyncCallback:
/* 800A5AF0 000A2AF0  7C 08 02 A6 */	mflr r0
/* 800A5AF4 000A2AF4  90 01 00 04 */	stw r0, 4(r1)
/* 800A5AF8 000A2AF8  94 21 FF E8 */	stwu r1, -0x18(r1)
/* 800A5AFC 000A2AFC  93 E1 00 14 */	stw r31, 0x14(r1)
/* 800A5B00 000A2B00  93 C1 00 10 */	stw r30, 0x10(r1)
/* 800A5B04 000A2B04  7C 7E 1B 78 */	mr r30, r3
/* 800A5B08 000A2B08  83 ED 89 60 */	lwz r31, lbl_80259D00-_SDA_BASE_(r13)
/* 800A5B0C 000A2B0C  4B FE 55 55 */	bl OSDisableInterrupts
/* 800A5B10 000A2B10  93 CD 89 60 */	stw r30, lbl_80259D00-_SDA_BASE_(r13)
/* 800A5B14 000A2B14  4B FE 55 75 */	bl OSRestoreInterrupts
/* 800A5B18 000A2B18  7F E3 FB 78 */	mr r3, r31
/* 800A5B1C 000A2B1C  80 01 00 1C */	lwz r0, 0x1c(r1)
/* 800A5B20 000A2B20  83 E1 00 14 */	lwz r31, 0x14(r1)
/* 800A5B24 000A2B24  83 C1 00 10 */	lwz r30, 0x10(r1)
/* 800A5B28 000A2B28  38 21 00 18 */	addi r1, r1, 0x18
/* 800A5B2C 000A2B2C  7C 08 03 A6 */	mtlr r0
/* 800A5B30 000A2B30  4E 80 00 20 */	blr 
GXTokenInterruptHandler:
/* 800A5B34 000A2B34  7C 08 02 A6 */	mflr r0
/* 800A5B38 000A2B38  90 01 00 04 */	stw r0, 4(r1)
/* 800A5B3C 000A2B3C  94 21 FD 20 */	stwu r1, -0x2e0(r1)
/* 800A5B40 000A2B40  93 E1 02 DC */	stw r31, 0x2dc(r1)
/* 800A5B44 000A2B44  93 C1 02 D8 */	stw r30, 0x2d8(r1)
/* 800A5B48 000A2B48  7C 9E 23 78 */	mr r30, r4
/* 800A5B4C 000A2B4C  80 0D 89 60 */	lwz r0, lbl_80259D00-_SDA_BASE_(r13)
/* 800A5B50 000A2B50  80 6D 89 80 */	lwz r3, __peReg-_SDA_BASE_(r13)
/* 800A5B54 000A2B54  28 00 00 00 */	cmplwi r0, 0
/* 800A5B58 000A2B58  A3 E3 00 0E */	lhz r31, 0xe(r3)
/* 800A5B5C 000A2B5C  41 82 00 34 */	beq lbl_800A5B90
/* 800A5B60 000A2B60  38 61 00 10 */	addi r3, r1, 0x10
/* 800A5B64 000A2B64  4B FE 49 FD */	bl OSClearContext
/* 800A5B68 000A2B68  38 61 00 10 */	addi r3, r1, 0x10
/* 800A5B6C 000A2B6C  4B FE 48 2D */	bl OSSetCurrentContext
/* 800A5B70 000A2B70  81 8D 89 60 */	lwz r12, lbl_80259D00-_SDA_BASE_(r13)
/* 800A5B74 000A2B74  38 7F 00 00 */	addi r3, r31, 0
/* 800A5B78 000A2B78  7D 88 03 A6 */	mtlr r12
/* 800A5B7C 000A2B7C  4E 80 00 21 */	blrl 
/* 800A5B80 000A2B80  38 61 00 10 */	addi r3, r1, 0x10
/* 800A5B84 000A2B84  4B FE 49 DD */	bl OSClearContext
/* 800A5B88 000A2B88  7F C3 F3 78 */	mr r3, r30
/* 800A5B8C 000A2B8C  4B FE 48 0D */	bl OSSetCurrentContext
lbl_800A5B90:
/* 800A5B90 000A2B90  80 6D 89 80 */	lwz r3, __peReg-_SDA_BASE_(r13)
/* 800A5B94 000A2B94  38 00 00 01 */	li r0, 1
/* 800A5B98 000A2B98  A0 83 00 0A */	lhz r4, 0xa(r3)
/* 800A5B9C 000A2B9C  50 04 17 7A */	rlwimi r4, r0, 2, 0x1d, 0x1d
/* 800A5BA0 000A2BA0  B0 83 00 0A */	sth r4, 0xa(r3)
/* 800A5BA4 000A2BA4  80 01 02 E4 */	lwz r0, 0x2e4(r1)
/* 800A5BA8 000A2BA8  83 E1 02 DC */	lwz r31, 0x2dc(r1)
/* 800A5BAC 000A2BAC  83 C1 02 D8 */	lwz r30, 0x2d8(r1)
/* 800A5BB0 000A2BB0  38 21 02 E0 */	addi r1, r1, 0x2e0
/* 800A5BB4 000A2BB4  7C 08 03 A6 */	mtlr r0
/* 800A5BB8 000A2BB8  4E 80 00 20 */	blr 

.global GXSetDrawDoneCallback
GXSetDrawDoneCallback:
/* 800A5BBC 000A2BBC  7C 08 02 A6 */	mflr r0
/* 800A5BC0 000A2BC0  90 01 00 04 */	stw r0, 4(r1)
/* 800A5BC4 000A2BC4  94 21 FF E8 */	stwu r1, -0x18(r1)
/* 800A5BC8 000A2BC8  93 E1 00 14 */	stw r31, 0x14(r1)
/* 800A5BCC 000A2BCC  93 C1 00 10 */	stw r30, 0x10(r1)
/* 800A5BD0 000A2BD0  7C 7E 1B 78 */	mr r30, r3
/* 800A5BD4 000A2BD4  83 ED 89 64 */	lwz r31, DrawDoneCB-_SDA_BASE_(r13)
/* 800A5BD8 000A2BD8  4B FE 54 89 */	bl OSDisableInterrupts
/* 800A5BDC 000A2BDC  93 CD 89 64 */	stw r30, DrawDoneCB-_SDA_BASE_(r13)
/* 800A5BE0 000A2BE0  4B FE 54 A9 */	bl OSRestoreInterrupts
/* 800A5BE4 000A2BE4  7F E3 FB 78 */	mr r3, r31
/* 800A5BE8 000A2BE8  80 01 00 1C */	lwz r0, 0x1c(r1)
/* 800A5BEC 000A2BEC  83 E1 00 14 */	lwz r31, 0x14(r1)
/* 800A5BF0 000A2BF0  83 C1 00 10 */	lwz r30, 0x10(r1)
/* 800A5BF4 000A2BF4  38 21 00 18 */	addi r1, r1, 0x18
/* 800A5BF8 000A2BF8  7C 08 03 A6 */	mtlr r0
/* 800A5BFC 000A2BFC  4E 80 00 20 */	blr 
GXFinishInterruptHandler:
/* 800A5C00 000A2C00  7C 08 02 A6 */	mflr r0
/* 800A5C04 000A2C04  38 60 00 01 */	li r3, 1
/* 800A5C08 000A2C08  90 01 00 04 */	stw r0, 4(r1)
/* 800A5C0C 000A2C0C  94 21 FD 20 */	stwu r1, -0x2e0(r1)
/* 800A5C10 000A2C10  93 E1 02 DC */	stw r31, 0x2dc(r1)
/* 800A5C14 000A2C14  3B E4 00 00 */	addi r31, r4, 0
/* 800A5C18 000A2C18  80 AD 89 80 */	lwz r5, __peReg-_SDA_BASE_(r13)
/* 800A5C1C 000A2C1C  A0 05 00 0A */	lhz r0, 0xa(r5)
/* 800A5C20 000A2C20  50 60 1F 38 */	rlwimi r0, r3, 3, 0x1c, 0x1c
/* 800A5C24 000A2C24  B0 05 00 0A */	sth r0, 0xa(r5)
/* 800A5C28 000A2C28  80 0D 89 64 */	lwz r0, DrawDoneCB-_SDA_BASE_(r13)
/* 800A5C2C 000A2C2C  98 6D 89 68 */	stb r3, lbl_80259D08-_SDA_BASE_(r13)
/* 800A5C30 000A2C30  28 00 00 00 */	cmplwi r0, 0
/* 800A5C34 000A2C34  41 82 00 30 */	beq lbl_800A5C64
/* 800A5C38 000A2C38  38 61 00 10 */	addi r3, r1, 0x10
/* 800A5C3C 000A2C3C  4B FE 49 25 */	bl OSClearContext
/* 800A5C40 000A2C40  38 61 00 10 */	addi r3, r1, 0x10
/* 800A5C44 000A2C44  4B FE 47 55 */	bl OSSetCurrentContext
/* 800A5C48 000A2C48  81 8D 89 64 */	lwz r12, DrawDoneCB-_SDA_BASE_(r13)
/* 800A5C4C 000A2C4C  7D 88 03 A6 */	mtlr r12
/* 800A5C50 000A2C50  4E 80 00 21 */	blrl 
/* 800A5C54 000A2C54  38 61 00 10 */	addi r3, r1, 0x10
/* 800A5C58 000A2C58  4B FE 49 09 */	bl OSClearContext
/* 800A5C5C 000A2C5C  7F E3 FB 78 */	mr r3, r31
/* 800A5C60 000A2C60  4B FE 47 39 */	bl OSSetCurrentContext
lbl_800A5C64:
/* 800A5C64 000A2C64  38 6D 89 6C */	addi r3, r13, FinishQueue-_SDA_BASE_
/* 800A5C68 000A2C68  4B FE 82 45 */	bl OSWakeupThread
/* 800A5C6C 000A2C6C  80 01 02 E4 */	lwz r0, 0x2e4(r1)
/* 800A5C70 000A2C70  83 E1 02 DC */	lwz r31, 0x2dc(r1)
/* 800A5C74 000A2C74  38 21 02 E0 */	addi r1, r1, 0x2e0
/* 800A5C78 000A2C78  7C 08 03 A6 */	mtlr r0
/* 800A5C7C 000A2C7C  4E 80 00 20 */	blr 

.global __GXPEInit
__GXPEInit:
/* 800A5C80 000A2C80  7C 08 02 A6 */	mflr r0
/* 800A5C84 000A2C84  3C 60 80 0A */	lis r3, GXTokenInterruptHandler@ha
/* 800A5C88 000A2C88  90 01 00 04 */	stw r0, 4(r1)
/* 800A5C8C 000A2C8C  38 83 5B 34 */	addi r4, r3, GXTokenInterruptHandler@l
/* 800A5C90 000A2C90  38 60 00 12 */	li r3, 0x12
/* 800A5C94 000A2C94  94 21 FF F8 */	stwu r1, -8(r1)
/* 800A5C98 000A2C98  4B FE 54 15 */	bl __OSSetInterruptHandler
/* 800A5C9C 000A2C9C  3C 60 80 0A */	lis r3, GXFinishInterruptHandler@ha
/* 800A5CA0 000A2CA0  38 83 5C 00 */	addi r4, r3, GXFinishInterruptHandler@l
/* 800A5CA4 000A2CA4  38 60 00 13 */	li r3, 0x13
/* 800A5CA8 000A2CA8  4B FE 54 05 */	bl __OSSetInterruptHandler
/* 800A5CAC 000A2CAC  38 6D 89 6C */	addi r3, r13, FinishQueue-_SDA_BASE_
/* 800A5CB0 000A2CB0  4B FE 73 39 */	bl OSInitThreadQueue
/* 800A5CB4 000A2CB4  38 60 20 00 */	li r3, 0x2000
/* 800A5CB8 000A2CB8  4B FE 57 F9 */	bl __OSUnmaskInterrupts
/* 800A5CBC 000A2CBC  38 60 10 00 */	li r3, 0x1000
/* 800A5CC0 000A2CC0  4B FE 57 F1 */	bl __OSUnmaskInterrupts
/* 800A5CC4 000A2CC4  80 6D 89 80 */	lwz r3, __peReg-_SDA_BASE_(r13)
/* 800A5CC8 000A2CC8  38 00 00 01 */	li r0, 1
/* 800A5CCC 000A2CCC  A0 83 00 0A */	lhz r4, 0xa(r3)
/* 800A5CD0 000A2CD0  50 04 17 7A */	rlwimi r4, r0, 2, 0x1d, 0x1d
/* 800A5CD4 000A2CD4  50 04 1F 38 */	rlwimi r4, r0, 3, 0x1c, 0x1c
/* 800A5CD8 000A2CD8  50 04 07 FE */	rlwimi r4, r0, 0, 0x1f, 0x1f
/* 800A5CDC 000A2CDC  50 04 0F BC */	rlwimi r4, r0, 1, 0x1e, 0x1e
/* 800A5CE0 000A2CE0  B0 83 00 0A */	sth r4, 0xa(r3)
/* 800A5CE4 000A2CE4  80 01 00 0C */	lwz r0, 0xc(r1)
/* 800A5CE8 000A2CE8  38 21 00 08 */	addi r1, r1, 8
/* 800A5CEC 000A2CEC  7C 08 03 A6 */	mtlr r0
/* 800A5CF0 000A2CF0  4E 80 00 20 */	blr 
